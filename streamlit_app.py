# -*- coding: utf-8 -*-
"""Streamlit_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tAbQT6iVhaUpAa3uWR8d-KldCKEMvW3d
"""

import streamlit as st
import pandas as pd
import numpy as np
import yfinance as yf
from datetime import date, timedelta
import plotly.graph_objects as go
from tensorflow.keras.models import load_model
import joblib

# =====================================================================================
# Konfigurasi Halaman Streamlit
# Menggunakan layout 'wide' untuk tampilan yang lebih modern dan luas.
# =====================================================================================
st.set_page_config(
    page_title="Prediksi Harga Bitcoin | Hybrid LSTM-GRU",
    page_icon="₿",
    layout="wide"
)

# =====================================================================================
# Fungsi-fungsi Bantuan (dengan Caching untuk Performa)
# =====================================================================================

# @st.cache_resource digunakan agar model dan scaler hanya di-load sekali saja.
@st.cache_resource
def load_prediction_model(model_path='bitcoin_model.h5'):
    """
    Memuat model hybrid LSTM-GRU yang telah dilatih dari file .h5.
    Pastikan file model Anda ada di direktori yang sama dengan script ini.
    """
    try:
        model = load_model(model_path)
        return model
    except (IOError, ImportError) as e:
        st.error(f"Error memuat model dari '{model_path}': {e}")
        st.info("Pastikan file model .h5 sudah benar dan berada di direktori yang sama.")
        return None

@st.cache_resource
def load_price_scaler(scaler_path='scaler.joblib'):
    """
    Memuat scaler yang digunakan saat training dari file .joblib.
    Scaler ini penting untuk mentransformasi data baru dan mengembalikan prediksi ke skala aslinya.
    """
    try:
        scaler = joblib.load(scaler_path)
        return scaler
    except (IOError, ImportError) as e:
        st.error(f"Error memuat scaler dari '{scaler_path}': {e}")
        st.info("Pastikan file scaler .joblib sudah benar dan berada di direktori yang sama.")
        return None

# @st.cache_data digunakan untuk caching data yang diunduh agar tidak perlu diunduh ulang setiap kali ada interaksi UI.
@st.cache_data
def load_bitcoin_data(start_date, end_date):
    """
    Mengunduh data harga Bitcoin (BTC-USD) dari Yahoo Finance untuk rentang tanggal tertentu.
    """
    try:
        data = yf.download('BTC-USD', start=start_date, end=end_date, progress=False)
        if data.empty:
            st.warning("Tidak ada data yang ditemukan untuk rentang tanggal yang dipilih. Coba rentang yang berbeda.")
            return None
        # Hanya gunakan kolom yang penting
        return data[['Close']]
    except Exception as e:
        st.error(f"Gagal mengunduh data dari Yahoo Finance: {e}")
        return None

# =====================================================================================
# Tampilan Utama Aplikasi
# =====================================================================================

# --- Judul dan Deskripsi ---
st.title("₿ Dasbor Prediksi Harga Bitcoin")
st.markdown("""
Selamat datang di dasbor prediksi harga Bitcoin. Aplikasi ini menggunakan model *Deep Learning* canggih **(Hybrid LSTM-GRU)** untuk memberikan estimasi harga di masa depan. Silakan gunakan panel di sebelah kiri untuk menyesuaikan parameter.
""")
st.markdown("---")


# --- Sidebar untuk Input Pengguna ---
st.sidebar.header("⚙️ Panel Kontrol")
st.sidebar.markdown("Atur parameter di bawah ini untuk memulai prediksi.")

# Pilihan rentang tanggal historis
default_start = date.today() - timedelta(days=365*3) # Default 3 tahun data
default_end = date.today()

start_date = st.sidebar.date_input("🗓️ Tanggal Mulai Data", default_start, min_value=date(2014, 9, 17), max_value=default_end)
end_date = st.sidebar.date_input("🗓️ Tanggal Akhir Data", default_end, min_value=start_date, max_value=date.today())

if start_date > end_date:
    st.sidebar.error("Error: Tanggal mulai tidak boleh melebihi tanggal akhir.")
else:
    # Pilihan jumlah hari prediksi
    n_days_to_predict = st.sidebar.slider(" forecasting (hari)", 1, 30, 7, help="Pilih berapa hari ke depan yang ingin Anda prediksi (Maks: 30 hari).")

    # Tombol untuk memulai proses
    st.sidebar.markdown("---")
    predict_button = st.sidebar.button("🚀 Jalankan Prediksi", type="primary", use_container_width=True)

    st.sidebar.markdown("---")
    st.sidebar.info(
        """
        **Judul Skripsi:**\n
        Implementasi Deep Learning Menggunakan Model Hybrid LSTM dan GRU untuk Memprediksi Harga Bitcoin Berbasis Streamlit.
        """
    )


# =====================================================================================
# Logika Inti dan Visualisasi
# =====================================================================================

# Muat data historis berdasarkan input sidebar
data = load_bitcoin_data(start_date, end_date)

if data is not None:
    # --- Tampilan sebelum prediksi dijalankan ---
    st.subheader("Visualisasi Harga Historis")
    st.markdown(f"Menampilkan data harga penutupan Bitcoin dari **{start_date.strftime('%d %B %Y')}** hingga **{end_date.strftime('%d %B %Y')}**.")

    # Buat figure Plotly awal
    fig = go.Figure()
    fig.add_trace(go.Scatter(
        x=data.index,
        y=data['Close'],
        mode='lines',
        name='Harga Historis',
        line=dict(color='deepskyblue', width=2)
    ))

    # --- Proses Prediksi (Hanya jika tombol ditekan) ---
    if predict_button:
        model = load_prediction_model()
        scaler = load_price_scaler()

        if model is not None and scaler is not None:
            with st.spinner('🤖 Model sedang bekerja... Menghitung prediksi...'):
                # Persiapan data untuk prediksi
                sequence_length = 60 # PENTING: Harus sama dengan yang digunakan saat training model

                if len(data) < sequence_length:
                    st.error(f"Error: Data historis tidak cukup. Dibutuhkan setidaknya {sequence_length} hari data untuk prediksi. Silakan pilih rentang tanggal yang lebih panjang.")
                else:
                    last_sequence = data['Close'].values[-sequence_length:]

                    # Scaling data
                    last_sequence_scaled = scaler.transform(last_sequence.reshape(-1, 1))

                    predictions = []
                    current_batch = last_sequence_scaled.reshape(1, sequence_length, 1)

                    # Loop untuk prediksi sekuensial
                    for i in range(n_days_to_predict):
                        pred = model.predict(current_batch, verbose=0)[0]
                        predictions.append(pred)
                        current_batch = np.append(current_batch[:, 1:, :], [[pred]], axis=1)

                    # Mengembalikan hasil prediksi ke skala harga asli
                    predicted_prices = scaler.inverse_transform(predictions)

                    # Buat tanggal untuk sumbu-x prediksi
                    last_date = data.index[-1]
                    prediction_dates = pd.to_datetime([last_date + timedelta(days=i) for i in range(1, n_days_to_predict + 1)])

                    # --- Update Grafik dengan Hasil Prediksi ---
                    st.subheader("Hasil Prediksi vs. Data Historis")
                    fig.add_trace(go.Scatter(
                        x=prediction_dates,
                        y=predicted_prices.flatten(),
                        mode='lines',
                        name='Harga Prediksi',
                        line=dict(color='tomato', width=2, dash='dash')
                    ))

                    # --- Tampilkan Metrik Utama ---
                    col1, col2 = st.columns(2)
                    last_price = data['Close'].iloc[-1]
                    predicted_tomorrow_price = predicted_prices[0][0]
                    delta = predicted_tomorrow_price - last_price

                    col1.metric("Harga Penutupan Terakhir", f"${last_price:,.2f}")
                    col2.metric(f"Prediksi Harga Besok", f"${predicted_tomorrow_price:,.2f}", f"${delta:,.2f}")

                    # --- Tampilkan Tabel Hasil Prediksi ---
                    st.markdown("#### Rincian Hasil Prediksi")
                    df_predictions = pd.DataFrame({
                        'Tanggal': prediction_dates.strftime('%A, %d %B %Y'),
                        'Harga Prediksi (USD)': predicted_prices.flatten()
                    })
                    st.dataframe(df_predictions.set_index('Tanggal').style.format({'Harga Prediksi (USD)': "${:,.2f}"}), use_container_width=True)

    # --- Pengaturan Layout Grafik dan Tampilkan ---
    fig.update_layout(
        xaxis_title='Tanggal',
        yaxis_title='Harga (USD)',
        yaxis_tickprefix='$',
        legend=dict(yanchor="top", y=0.99, xanchor="left", x=0.01),
        template='plotly_dark', # Tema gelap agar terlihat modern
        height=500,
        margin=dict(l=20, r=20, t=20, b=20)
    )
    st.plotly_chart(fig, use_container_width=True)

    # Tampilkan data mentah dalam expander (tersembunyi secara default)
    with st.expander("Lihat Data Historis Mentah"):
        st.dataframe(data.sort_index(ascending=False).style.format({'Close': "${:,.2f}"}), use_container_width=True)
